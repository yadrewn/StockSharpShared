<?xml version="1.0" encoding="utf-8"?>
<topic id="0bcd3950-6fc9-463a-b473-6b0c6587f7f1" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
        <introduction>
      <para>
      	Графический компонент <codeEntityReference>T:StockSharp.Xaml.OptionDesk</codeEntityReference> - таблица для отображения доски опционов. Показывает "греки", вмененную волатильность,
                  	 теоретическую цену, лучший оффер и бид для Put и Call опционов.
      </para>
      <para>
      	Ниже показан пример OptionCalculator, в котором используется этот компонент. Исходные коды примера можно найти в папке <legacyItalic>Samples/Options/OptionCalculator</legacyItalic>.
      </para>
      <mediaLink><image placement="left" xlink:href="option_desk" /></mediaLink>
    </introduction>
    
   <procedure>
   	<title>Пример OptionCalculator</title>
    	<steps class="ordered">
			<step>
				<content>
					<para>В коде XAML добавляем элемент <codeEntityReference>T:StockSharp.Xaml.OptionDesk</codeEntityReference>
							и присваиваем ему имя <legacyBold>Desk</legacyBold>.</para>
            		<code title="XAML" language="XAML">
	  				<![CDATA[
<Window x:Class="OptionCalculator.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:loc="clr-namespace:StockSharp.Localization;assembly=StockSharp.Localization"
        xmlns:xaml="http://schemas.stocksharp.com/xaml"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        Title="{x:Static loc:LocalizedStrings.XamlStr396}" Height="400" Width="1030">
    <Grid Margin="5,5,5,5">
    
	    .........................................................
	    
	    <xaml:OptionDesk x:Name="Desk" Grid.Row="6" Grid.ColumnSpan="3" Grid.Column="0" />
    
	</Grid>
</Window>
	  				]]>
                  	</code>
				</content>
			</step>
			<step>
				<content>
				<para>В коде C# создаем подключение. В зависимости от выбранного типа коннектора инициализируем экземпляр 
					<codeEntityReference>T:StockSharp.Quik.QuikTrader</codeEntityReference> или <codeEntityReference>T:StockSharp.Plaza.PlazaTrader</codeEntityReference>.
					Если Quik используется в режиме DDE, то настраиваем дополнительные колонки опционов.</para>
            	<code title="C#" language="C#">
                  <![CDATA[
if (_connector == null)
{
	if (IsQuik.IsChecked == true)
	{
		var isDde = IsDde.IsChecked == true;

		if (isDde && Path.Text.IsEmpty())
		{
			MessageBox.Show(this, LocalizedStrings.Str2969);
			return;
		}

		// создаем подключение
		var trader = new QuikTrader(Path.Text)
		{
			IsDde = isDde
		};

		if (isDde)
		{
			// изменяем метаданные так, чтобы начали обрабатывать дополнительные колонки опционов
			var columns = trader.SecuritiesTable.Columns;
			columns.Add(DdeSecurityColumns.Strike);
			columns.Add(DdeSecurityColumns.ImpliedVolatility);
			columns.Add(DdeSecurityColumns.UnderlyingSecurity);
			columns.Add(DdeSecurityColumns.TheorPrice);
			columns.Add(DdeSecurityColumns.OptionType);
			columns.Add(DdeSecurityColumns.ExpiryDate);
			trader.DdeTables = new[] { trader.SecuritiesTable, trader.TradesTable };
		}

		_connector = trader;
	}
	else
	{
		var trader = new PlazaTrader
		{
			Address = Address.Text.To<EndPoint>(),
			IsCGate = IsCGate.IsChecked == true
		};

		trader.Tables.Add(trader.TableRegistry.Volatility);
			
		if (IsAutorization.IsChecked == true)
		{
			trader.Login = Login.Text;
			trader.Password = Password.Password;
		}

		_connector = trader;
	}
}
]]>
                  	</code>
				</content>
				</step>
				<step>
					<content>
					<para>Задаем провайдера сообщений для рыночных данных и инструментов.</para>
            		<code title="C#" language="C#">
                  <![CDATA[
Desk.MarketDataProvider = _connector;
Desk.SecurityProvider = _connector;
Desk.CurrentTime = null;
]]>
                   </code>
				</content>
				</step>
				<step>
				<content>
					<para>При получении инструментов:</para>
					<list class="ordered">
  							<listItem>Заполняем коллекцию фьючерсов для выпадающего списка;</listItem>
  							<listItem>Инициализируем выбранный инструмент первым элементом этой коллекции;</listItem>
  							<listItem>Заполняем массив цепочкой опционов, где подлежащим активом выступает выбранный инструмент;</listItem>
  							<listItem>Присваиваем свойству <codeEntityReference qualifyHint="true">P:StockSharp.Xaml.OptionDesk.Options</codeEntityReference> этот массив;</listItem>
  							<listItem>Обновляем значения доски опционов при помощи метода 
  							<codeEntityReference qualifyHint="true">M:StockSharp.Xaml.OptionDesk.RefreshOptions</codeEntityReference>.</listItem>
					</list>
            		<code title="C#" language="C#">
                  <![CDATA[
_connector.NewSecurities += securities =>
	this.GuiAsync(() =>
	{
		// добавляем в выпадающий список (подлежащие инструменты) только фьючерсы
		_assets.AddRange(securities.Where(s => s.Type == SecurityTypes.Future));

		if (SelectedAsset == null && _assets.Count > 0)
			SelectedAsset = _assets.First();

		if (SelectedAsset != null)
		{
			var newStrikes = securities
				.Where(s => s.Type == SecurityTypes.Option && s.UnderlyingSecurityId.CompareIgnoreCase(SelectedAsset.Id))
				.ToArray();

			if (newStrikes.Length > 0)
			{
				_options.AddRange(newStrikes);
				Desk.Options = _options;
				Desk.RefreshOptions();
			}
		}
	});
]]>
                  	</code>
					</content>
				</step>
				<step>
					<content>
						<para>При изменении параметров опционов:</para>
						<list class="ordered">
  							<listItem>Заполняем массив опционами, которые не были добавлены ранее в коллекцию опционов контрола;</listItem>
  							<listItem>Если добавлены новые опционы, то обновляем значение свойства 
  							<codeEntityReference qualifyHint="true">P:StockSharp.Xaml.OptionDesk.Options</codeEntityReference>;</listItem>
  							<listItem>
  									 Если были добавлены новые опционы или изменились параметры ранее добавленных опционов, то обновляем доску опционов 
  									<codeEntityReference qualifyHint="true">M:StockSharp.Xaml.OptionDesk.RefreshOptions</codeEntityReference>.</listItem>
						</list>
            			<code title="C#" language="C#">
                  <![CDATA[
_connector.SecuritiesChanged += securities =>
{
	this.GuiAsync(() =>
	{
		if (SelectedAsset == null)
			return;
			
		var newStrikes = securities
				.Where(s => s.Type == SecurityTypes.Option && s.UnderlyingSecurityId.CompareIgnoreCase(SelectedAsset.Id))
				.Where(s => !_options.Contains(s))
				.ToArray();

		if (newStrikes.Length > 0)
		{
			_options.AddRange(newStrikes);
			Desk.Options = _options;
			Desk.RefreshOptions();
		}

		if (Desk.Options.Intersect(securities).Any())
			Desk.RefreshOptions();
	});
};

]]>
                  		</code>
					</content>
				</step>
			</steps>
 	</procedure>

    <relatedTopics>
		<link xlink:href="063708c5-b6a8-45f6-9ff9-608f89796a88">Греки</link>
    </relatedTopics>
  </developerConceptualDocument>
</topic>