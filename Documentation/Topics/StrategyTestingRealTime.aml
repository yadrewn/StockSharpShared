<?xml version="1.0" encoding="utf-8"?>
<topic id="d27245ae-abfd-4d6b-b8c4-d1a24a45116f" revisionNumber="0">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

	  <introduction>
		  <para>
			  Тестирование на рыночных данных представляет собой торговлю с реальным подключением к бирже ("живые" котировки), но без реального выставления
			  заявок на биржу. Все регистрируемые заявки перехватываются, и их исполнение эмулируется на основе рыночных стаканов. Такое тестирование может
			  быть полезно, например, если разрабатывается торговый тренажер. Или необходимо проверить торговый алгоритм на краткосрочном отрезке времени с
			  реальными котировками.
		 </para>
		 <para>
			  Для эмуляции торговли на реальных данных необходимо использовать <codeEntityReference>T:StockSharp.Algo.Testing.RealTimeEmulationTrader`1</codeEntityReference>, 
			  который выполняет роль "обертки" коннектора конкретной торговой системы (<token>quik</token>, <token>smartcom</token> и т.п.). Ниже приводится описание примера работы с эмулятором с использованием подключения
			  к <token>smartcom</token>. Сам пример находится в папке <legacyItalic>Samples/Testing/SampleRealTimeEmulation</legacyItalic>.
		  </para>
	  </introduction>

	  <procedure>
		  <title>Работа с эмулятором торговли на реальных данных</title>
		  <steps class="ordered">
			  <step>
				  <content>
					  <para>
						  Создаем шлюз <codeEntityReference>T:StockSharp.Algo.Testing.RealTimeEmulationTrader`1</codeEntityReference> и передаем в его конструктор
						  адаптер сообщений <codeEntityReference>T:StockSharp.SmartCom.SmartComMessageAdapter</codeEntityReference>. Для создания идентификаторов "виртуальных" транзакций используем
						  генератор идентификаторов <legacyBold>MillisecondIncrementalIdGenerator</legacyBold>.
					  </para>
					  <code language="C#"><![CDATA[
					_connector = new RealTimeEmulationTrader<SmartComMessageAdapter>(new SmartComMessageAdapter(new MillisecondIncrementalIdGenerator())
					{
						Login = Login.Text,
						Password = Password.Password.To<SecureString>(),
						Address = Address.SelectedAddress
					});
					  ]]></code>
				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
						  Созданный шлюз используется как обычный коннектор. В нашем случае подписываемся на события, 
						  создаем <codeEntityReference>T:StockSharp.Algo.Candles.CandleManager</codeEntityReference>, передаем информацию
						  в графические компоненты и устанавливаем соединение.
					  </para>
					  <code language="C#"><![CDATA[
SecurityEditor.SecurityProvider = new FilterableSecurityProvider(_connector);

_candleManager = new CandleManager(_connector);

_logManager.Sources.Add(_connector);
					
_connector.Connected += () =>
{
	// set flag (connection is established)
	_isConnected = true;

	// update gui labels
	this.GuiAsync(() =>
		{
			ChangeConnectStatus(true);
			ConnectBtn.IsEnabled = false;
		});
};

// subscribe on connection error event
_connector.ConnectionError += error => this.GuiAsync(() =>
{
	// update gui labels
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2959);
});

_connector.NewMarketDepths += OnDepths;
_connector.MarketDepthsChanged += OnDepths;

_connector.NewPortfolios += PortfolioGrid.Portfolios.AddRange;
_connector.NewPositions += PortfolioGrid.Positions.AddRange;

_connector.NewOrders += Orders.Orders.AddRange;
_connector.NewMyTrades += Trades.Trades.AddRange;

// subscribe on error of order registration event
_connector.OrdersRegisterFailed += OrdersFailed;

_candleManager.Processing += (s, candle) =>
	{
		if (candle.State == CandleStates.Finished)
			_buffer.Add(candle);
	};

// subscribe on error event
_connector.Error += error =>
	this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2955));

	// subscribe on error of market data subscription event
	_connector.MarketDataSubscriptionFailed += (security, type, error) =>
		this.GuiAsync(() => MessageBox.Show(this, error.ToString(), LocalizedStrings.Str2956Params.Put(type, security)));
			}

_connector.Connect();
					  ]]></code>
				  </content>
			  </step>

			  <step>
				  <content>
					  <para>
						  На следующем рисунке показан результат работы примера.
					  </para>
					  <mediaLink>
						  <image placement="center" xlink:href="sample_realtaime_emulation" />
					  </mediaLink>
				  </content>
			  </step>
		  </steps>
	  </procedure>

    <relatedTopics>
    
    
    
    
    
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
        
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>

  </developerConceptualDocument>
</topic>