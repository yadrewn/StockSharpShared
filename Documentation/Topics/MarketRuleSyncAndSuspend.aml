<?xml version="1.0" encoding="utf-8"?>
<topic id="41e6ea41-f8f8-4788-b5ea-c1c12e24007a" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
    	<para>
				Иногда требуется установить одновременно несколько правил, чтобы каждое из них было активно только тогда, когда завершено формирование всех этих правил.
				Для этого используется метод <codeEntityReference qualifyHint="true">M:StockSharp.Algo.MarketRuleHelper.SuspendRules(System.Action)</codeEntityReference>.
		</para>
    
    </introduction>

	<!-- <procedure>
		<title>Синхронизация правил</title>
		<steps class="ordered">
			<step>
				><content>
					<para>Для синхронизации правил необходимо создать объект синхронизации:</para>
			
					<code language="C#">
					<![CDATA[
private readonly object _syncToken = new object();
					]]>
					</code>					
				</content> 
			</step>
			
			<step>
				<content>
					<para>Затем вызвать 
					<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.Sync``1(``0,Ecng.Common.SyncObject)</codeEntityReference> 
					у нужных правил:</para>
					
					<code language="C#">
					<![CDATA[

order
	.WhenRegistered()
	.Do(() => this.AddInfoLog("Заявка успешно зарегестрирована"))
	.Once()
	.Sync(_syncToken)
	.Apply(this);
	
order
	.WhenRegisterFailed()
	.Do(() => this.AddInfoLog("Заявка не принята биржей"))
	.Once()
	.Sync(_syncToken)
	.Apply(this);
					]]>
					</code>							
				</content>
			</step>			
		</steps>
	</procedure> -->
	

    <section address="Section2">
		<title>Использование приостановки правил</title>
		<content>
			<procedure>
				<steps class="bullet">
				<step>
						<content>
							<para>Вне стратегии:</para>
			
							<code language="C#">
							<![CDATA[
MarketRuleHelper.SuspendRules(() =>	
{
	order
		.WhenRegistered()
		.Do(() => trader.AddInfoLog("Заявка успешно зарегестрирована"))
		.Once()
		.Apply(this);
	
	order
		.WhenCancelled()
		.Do(() => trader.AddInfoLog("Заявка успешно отменена"))
		.Once()
		.Apply(this);
});

// регистрация заявки
trader.RegisterOrder(order);
							]]>
							</code>				
						</content>
					</step>
			
					<step>
						<content>
							<para>Внутри стратегии:</para>
					
							<code language="C#">
							<![CDATA[
class FirstStrategy : Strategy
{
	...
	
    protected override void OnStarting()
    {
		this.SuspendRules(() =>
		{
			_series
				.WhenCandlesFinished()
				.Do(FinishCandle)
				.Apply(this);

			Security
				.WhenNewTrades()
				.Do(NewTrade)
				.Apply(this);
		});

        base.OnStarting();
    }
    
    ...
}
							]]>
							</code>						
						</content>
					</step>			
				</steps>
			</procedure>	
		</content>
	</section>

	</developerWalkthroughDocument>
</topic>