<?xml version="1.0" encoding="utf-8"?>
<topic id="61ad1ece-8094-44a9-a558-ec664a1ab16a" revisionNumber="0">
  <developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
      	<para>
      		При старте стратегии может возникнуть необходимость загрузки ранее совершённых заявок и сделок (например, когда робот был перезагружен в течении
      		торговой сессии или сделки и заявки переносятся через ночь). Для этого нужно:
      	</para>
	  <list class="ordered">
		<listItem>
		  Найти те заявки, которые необходимо загрузить в стратегию, и вернуть их из метода (например, загрузить идентификаторы заявок, если стратегия записывает каждый
		  раз при регистрации через метод 
		  <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.Strategy.ProcessNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})</codeEntityReference> из файла).
		</listItem>
		<listItem>
		  Объединить полученный результат с базовым методом <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.Strategy.ProcessNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})</codeEntityReference>.
		</listItem>
		<listItem>
		  После того, как заявки будут загружены в стратегию, загрузятся и все совершенные по ним сделки. Это будет сделано автоматически.
		</listItem>
	  </list>
	  <para>
		  Следующий пример показывает загрузку всех сделок в стратегию:
	  </para>
    </introduction>
    
    <procedure>
      <title>Загрузка в стратегию ранее совершенных заявок и сделок</title>

      <steps class="ordered">
        <step>
          <content>
            <para>Для этого, чтобы <codeEntityReference>T:StockSharp.Algo.Strategies.Strategy</codeEntityReference> загрузила свое предыдущее состояние,
            необходимо переопределить <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.Strategy.ProcessNewOrders(System.Collections.Generic.IEnumerable{StockSharp.BusinessEntities.Order})</codeEntityReference>.
		  	На вход данному методу из <codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Strategies.Strategy.OnStarted</codeEntityReference>
		  	поступят все <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.IConnector.Orders</codeEntityReference>
		  	и <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.IConnector.StopOrders</codeEntityReference>, и их необходимо
		  	отфильтровать:</para>
		  	<code language="C#"><![CDATA[private bool _isOrdersLoaded;
private bool _isStopOrdersLoaded;
		  	
protected override IEnumerable<Order> ProcessNewOrders(IEnumerable<Order> newOrders, bool isStopOrders)
{
	// если заявки уже были ранее загружены
	if ((!isStopOrders && _isOrdersLoaded) || (isStopOrders && _isStopOrdersLoaded))
		return base.ProcessNewOrders(newOrders, isStopOrders);

	return Filter(newOrders);
}]]></code>
          </content>
        </step>
        <step>
        	<content>
        		<para>
        			Чтобы реализовать фильтрацию заявок, необходимо определить критерий отсеивания. Например, если в процессе работы стратегии сохранять
        			все регистрируемые заявки в файл, то можно сделать фильтр по номеру транзакции <codeEntityReference qualifyHint="true">P:StockSharp.BusinessEntities.Order.TransactionId</codeEntityReference>.
        			Если такой номер присутствует в файле, значит заявка была зарегистрирована через данную стратегию:
        		</para>
        		<code language="C#"><![CDATA[private IEnumerable<Order> Filter(IEnumerable<Order> orders)
{
	// считываем номера транзакций из файла
	var transactions = File.ReadAllLines("orders_{0}.txt".Put(Name)).Select(l => l.To<long>()).ToArray();
	
	// находим наши заявки по считанным номерам
	return orders.Where(o => transactions.Contains(o.TransactionId));
}]]></code>
        	</content>
        </step>
        <step>
        	<content>
        		<para>
        			Запись номеров транзакций заявок, регистрируемых через стратегию, можно осуществить, переопределив метод
        			<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.Strategy.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference>:
        		</para>
        		<code language="C#"><![CDATA[protected override void RegisterOrder(Order order)
{
	// отравляем заявку дальше на регистрацию
	base.RegisterOrder(order);
	
	// добавляем новый номер транзакции
	File.AppendAllLines("orders_{0}.txt".Put(Name), new[]{ order.TransactionId.ToString() });
}]]></code>
        	</content>
        </step>
        <step>
        	<content>
        		<para>
        			После того, как заявки будут загружены в стратегию, загрузятся и все совершенные по ним сделки. Это будет сделано автоматически.
        		</para>
        	</content>
        </step>
      </steps>
    </procedure>

    <!--<prerequisites>
      <content>
        <para>Optional information on prerequisites</para>
      </content>
    </prerequisites>-->
    
    <!-- One or more procedure or section elements -->

    <!--<section>
      <title>Optional section</title>

      <content>
        <para>Some topic content</para>
      </content>
    </section>

    <nextSteps>
      <content>
        <para>Optional next steps after reading this walk-through</para>
      </content>
    </nextSteps>-->
    
    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
                
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>
    
  </developerWalkthroughDocument>
</topic>