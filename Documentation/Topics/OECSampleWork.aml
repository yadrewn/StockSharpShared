<?xml version="1.0" encoding="utf-8"?>
<topic id="1dbc72c4-cc59-4094-824a-a2b77f9623d6" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

	<introduction>
		<para>Пример работы с <codeEntityReference qualifyHint="false">T:StockSharp.OpenECry.OECTrader</codeEntityReference> демонстрирует приложение SampleOEC, показанное на рисунке ниже. 
		Исходные коды примера лежат в дистрибутиве в папке <legacyItalic>Samples/OpenECry</legacyItalic>.</para>
		
		<mediaLink><image placement="center" xlink:href="OECTraderMainWindow"/></mediaLink>
	</introduction>

		<procedure>
				<steps class="ordered">
					<step>
						<content>
							<para>В самом начале необходимо создать экземпляр класса шлюза 
							<codeEntityReference qualifyHint="false">T:StockSharp.OpenECry.OECTrader</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
Trader = new OECTrader {
	Login = Login.Text, 
    Password = Password.Password,
    OECConnectionAddress = address,
    OECConnectionPort = port,
    EnableOECLogging = true
};
							]]>
							</code>
						</content>
					</step>

					<step>
						<content>
							<para>Далее следует установить требуемые обработчики событий <codeEntityReference qualifyHint="false">T:StockSharp.BusinessEntities.IConnector</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
// событие восстановления соединения
Trader.ReConnectionSettings.ConnectionRestored += () => this.GuiAsync(() =>
{
	// разблокируем кнопку Экспорт (соединение было восстановлено)
	ChangeConnectStatus(true);
	MessageBox.Show(this, "Соединение восстановлено.");
});

// подписываемся на событие успешного соединения
Trader.Connected += () =>
{
	// возводим флаг, что соединение установлено
	_isConnected = true;

	// разблокируем кнопку Экспорт
	this.GuiAsync(() => ChangeConnectStatus(true));
};

// подписываемся на событие разрыва соединения
Trader.ConnectionError += error => this.GuiAsync(() =>
{
	// заблокируем кнопку Экспорт (так как соединение было потеряно)
	ChangeConnectStatus(false);

	MessageBox.Show(this, error.ToString(), "Ошибка соединения");	
});

// событие успешного отключения
Trader.Disconnected += () => this.GuiAsync(() => ChangeConnectStatus(false));

// событие ошибки обработки данных
Trader.ProcessDataError += error => this.GuiAsync(() => MessageBox.Show(this, error.ToString(), "Ошибка обработки данных"));

// событие получения новых инструментов
Trader.NewSecurities += securities => this.GuiAsync(() => _securitiesWindow.AddSecurities(securities));
// событие получения новых собственных сделок
Trader.NewMyTrades += trades => this.GuiAsync(() => _myTradesWindow.Trades.AddRange(trades));
// событие получения новых сделок по подписанным инструментам
Trader.NewTrades += trades => this.GuiAsync(() => _tradesWindow.Trades.AddRange(trades));
// событие получения новых заявок
Trader.NewOrders += orders => this.GuiAsync(() => _ordersWindow.Orders.AddRange(orders));
// событие получения новых стоп-заявок
Trader.NewStopOrders += orders => this.GuiAsync(() => _stopOrdersWindow.Orders.AddRange(orders));
// событие получения новых портфелей
Trader.NewPortfolios += portfolios =>
{
    portfolios.ForEach(Trader.RegisterPortfolio);
    _portfoliosWindow.Portfolios.AddRange(portfolios);
};
// событие получения новых позиций
Trader.NewPositions += positions => this.GuiAsync(() => _positionsWindow.Positions.AddRange(positions));

// событие неудачной регистрации заявок
Trader.OrdersRegisterFailed += OrdersFailed;
// событие неудачного снятия заявок
Trader.OrdersCancelFailed += OrdersFailed;
// событие неудачной регистрации стоп-заявок
Trader.StopOrdersRegisterFailed += OrdersFailed;
// событие неудачного снятия стоп-заявок
Trader.StopOrdersCancelFailed += OrdersFailed;

							]]>
							</code>						
						</content>
					</step>
					
					<step>
						<content>
							<para>Далее необходимо выполнить подключение к серверу OEC:</para>
            				<code language="C#">
            				<![CDATA[
Trader.Connect();
							]]>
							</code>						
							<para>После подключения можно ожидать срабатывания событий:</para>
							<list class="bullet">
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.SecuritiesChanged</codeEntityReference> – 
									изменение инструмента (последней цены, цены спроса/предложения и т.д.) запрошенного через
									<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security)</codeEntityReference>.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.MarketDepthsChanged</codeEntityReference> – 
									изменение стакана, запрошенного с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference>.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.NewTrades</codeEntityReference> – 
									новые тики по подписанным с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security)</codeEntityReference> инструментам.</para>
								</listItem>
								<listItem>
									<para><codeEntityReference qualifyHint="true">E:StockSharp.BusinessEntities.IConnector.PortfoliosChanged</codeEntityReference> – 
									изменение портфелей, запрошенное с помощью <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference>.</para>
								</listItem>
							</list>
						</content>
					</step>

					<step>
						<content>
							<para>Поиск инструментов (<link xlink:href="39e0b7aa-0303-438c-b347-fea21540c9f3">подробнее</link>):</para>
							
							<mediaLink><image placement="center" xlink:href="OECTraderSecurity"/></mediaLink>
            				
            				<code language="C#">
            				<![CDATA[
private void SearchText_PreviewKeyUp(object sender, KeyEventArgs e)
{
	if (e.Key != Key.Enter)
		return;

	var text = SearchText.Text.Trim();

	if (text.IsEmpty())
		return;

	MainWindow.Instance.Trader.LookupSecurities(new Security { Code = text });
}
							]]>
							</code>
						</content>
					</step>

					<step>
						<content>
							<para>Для получения обновлений по выбранному инструменту и тикам необходимо воспользоваться методами 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterSecurity(StockSharp.BusinessEntities.Security)</codeEntityReference> 
							и <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterTrades(StockSharp.BusinessEntities.Security)</codeEntityReference> соответственно:</para>
            				<code language="C#">
            				<![CDATA[
private void BidAsk_Click(object sender, RoutedEventArgs e)
{
    var security = SelectedSecurity;
    var trader = MainWindow.Instance.Trader;

    if (_bidAskSecurities.Contains(security))
    {
        // останавливаем обновления по инструменту
        trader.UnRegisterSecurity(security);
        trader.UnRegisterTrades(security);

        _bidAskSecurities.Remove(security);
    }
    else
    {
        // начинаем получать обновления по инструменту
        trader.RegisterSecurity(security);
        trader.RegisterTrades(security);

        _bidAskSecurities.Add(security);
    }
}
							]]>
							</code>						
						</content>
					</step>

					<step>
						<content>
							<para>Для запроса обновлений по стаканам необходимо воспользоваться методом 
							<codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterMarketDepth(StockSharp.BusinessEntities.Security)</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
private void Quotes_Click(object sender, RoutedEventArgs e)
{
    var window = _quotesWindows.SafeAdd(SelectedSecurity, security =>
    {
        // начинаем получать котировки стакана
        MainWindow.Instance.Trader.RegisterMarketDepth(security);

        // создаем окно со стаканом
        var wnd = new QuotesWindow { Title = security.Code + " котировки" };
        wnd.MakeHideable();
        return wnd;
    });

    if (window.Visibility == Visibility.Visible)
        window.Hide();
    else
        window.Show();
}
							]]>
							</code>						
						</content>
					</step>

					<step>
						<content>
							<para>Для получения обновлений по портфелям используется метод <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterPortfolio(StockSharp.BusinessEntities.Portfolio)</codeEntityReference>:</para>
            				<code language="C#">
            				<![CDATA[
Trader.NewPortfolios += portfolios =>
{
    // регистрирует портфели на обновление данных
    portfolios.ForEach(Trader.RegisterPortfolio);

    _portfoliosWindow.Portfolios.AddRange(portfolios);
};
							]]>
							</code>						
						</content>
					</step>

					<step>
						<content>
							<para>Для регистрации заявок предусмотрена кнопка «Новая заявка». 
							Метод <codeEntityReference>M:StockSharp.BusinessEntities.IConnector.RegisterOrder(StockSharp.BusinessEntities.Order)</codeEntityReference> отправляет 
							заявку на сервер:</para>
            				<code language="C#">
            				<![CDATA[
private void Send_Click(object sender, RoutedEventArgs e)
{
    var order = new Order
    {
        Type = IsMarket.IsChecked == true ? OrderTypes.Market : OrderTypes.Limit,
        Portfolio = Portfolio.SelectedPortfolio,
        Volume = Volume.Text.To<decimal>(),
        Price = Price.Text.To<decimal>(),
        Security = Security,
        Direction = IsBuy.IsChecked == true ? OrderDirections.Buy : OrderDirections.Sell,
    };

    MainWindow.Instance.Trader.RegisterOrder(order);

    DialogResult = true;
}
							]]>
							</code>						
						</content>
					</step>

				</steps>
		</procedure>

		
	</developerWalkthroughDocument>
</topic>