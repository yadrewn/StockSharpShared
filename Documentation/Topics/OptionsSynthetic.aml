<?xml version="1.0" encoding="utf-8"?>
<topic id="efad2861-7392-4ed6-957d-f7fde651a48f" revisionNumber="0">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
		<para>
			Для построения синтетических позиций по опционам (или, наоборот, опционных позиций по базовому инструменту) можно воспользоваться специальным
			классом <codeEntityReference>T:StockSharp.Algo.Derivatives.Synthetic</codeEntityReference>. Данный класс через методы
			<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Derivatives.Synthetic.Buy</codeEntityReference> и
			<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Derivatives.Synthetic.Sell</codeEntityReference> возвращает комбинацию из
			синтетических инструментов для определения их возможной позиции.
		</para>
		<para>
			Синтетическую комбинацию можно использовать совместно с определением степени ликвидности по опциону (когда нет возможности реализовать необходимую
			позицию). Для этого можно воспользоваться методами анализа ликвидности стакана
			<codeEntityReference qualifyHint="true">Overload:StockSharp.Algo.TraderHelper.GetTheoreticalTrades</codeEntityReference>:
		</para>
		<code language="C#"><![CDATA[// получить стакан опциона
var depth = trader.GetMarketDepth(option);

// получить теоритические сделки на покупку 100 контрактов
var trades = depth.GetTheoreticalTrades(OrderDirections.Buy, 100);

// расчитать реализованный объем
var matchedVolume = trades.Sum(t => t.Trade.Volume);

// регистрируем заявку по основному опциону
trader.RegisterOrder(new Order
{
	Security = option,
	Volume = matchedVolume,
	Direction = OrderDirections.Buy,
	// максимальная цена, чтобы реализовать требуемый объем
	Price = trades.Max(t => t.Trade.Price),
});

// определяем оставшийся объем
var elapsedVolume = 100 - matchedVolume;

// если реализованный объем меньше планируемого
if (elapsedVolume > 0)
{
	// получаем синтетические инструменты
	var syntheticBuy = new Synthetic(option).Buy();

	// регистрируем оставшийся объем по синтетическим инструментам
	foreach (var pair in syntheticBuy)
	{
		trader.RegisterOrder(new Order
		{
			Security = pair.Key,
			Volume = elapsedVolume,
			Direction = pair.Value,
			Price = pair.Key.LastTrade.Price,
		});
	}
}]]></code>
		<para>
			Аналогично опционам также можно получить опционную позицию для базового инструмента через методы
			<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Derivatives.Synthetic.Buy(System.Decimal)</codeEntityReference> и
			<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Derivatives.Synthetic.Sell(System.Decimal)</codeEntityReference>.
		</para>
    </introduction>

    <!--<section>
      <title>A topic section</title>

      <content>
        <para>Some topic content</para>
      </content>
    </section>-->

    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
        
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>

  </developerConceptualDocument>
</topic>