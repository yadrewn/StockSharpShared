<?xml version="1.0" encoding="utf-8"?>
<topic id="e4a57b52-bd14-4640-a7c7-0979dba1ad0a" revisionNumber="1">
	<developerWalkthroughDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">

	<introduction>
		<para>Вся работа по сохранению и восстановлению данных в <token>stocksharp</token> происходит через специальный API, расположенный в разделе
		<codeEntityReference>N:StockSharp.Algo.Storages</codeEntityReference>.
		В данном разделе находится интерфейс
		<codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.IStorageRegistry</codeEntityReference>,
		который создан для описания всех возможных действий с хранилищем, и содержит такие свойства как
		<codeEntityReference qualifyHint="false">P:StockSharp.Algo.Storages.IEntityRegistry.Securities</codeEntityReference>,
		<codeEntityReference qualifyHint="false">P:StockSharp.Algo.Storages.IEntityRegistry.Orders</codeEntityReference>
		и т.д. Через эти свойства можно получить все сохраненные ранее торговые объекты, например, инструменты. Вся работа идет как с обычной
		коллекцией за счет использования интерфейса
		<codeEntityReference>T:StockSharp.Algo.Storages.IStorageEntityList`1</codeEntityReference>.
		Если требуется сохранить торговый объект в хранилище (например, появилась новая заявка, или обновилась ранее зарегистрированная), то необходимо использовать метод
		<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Storages.IStorageEntityList`1.Save(`0)</codeEntityReference>.</para>
         
		<para>Реализацией по умолчанию интерфейса
		<codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.IStorageRegistry</codeEntityReference>
		является класс
		<codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.StorageRegistry</codeEntityReference>.
		Он взаимодействует с данными через низкоуровневый системный интерфейс <codeEntityReference>T:Ecng.Serialization.IStorage</codeEntityReference>. 
		Именно данный интерфейс предоставляет прозрачную работу с
		<link xlink:href="38595e78-cff6-44ed-b525-2be13e6c17e4">Базами данных</link>, скрывая особенности.</para>
		  
		<para>Работа с маркет-данными, такие как тиковые сделки или стаканы, происходит через отдельный интерфейс
		<codeEntityReference>T:StockSharp.Algo.Storages.IMarketDataStorage`1</codeEntityReference>,
		который получается на основе информации об инструменте через методы
		<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Storages.IStorageRegistry.GetTradeStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)</codeEntityReference>
		и
		<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.Storages.IStorageRegistry.GetMarketDepthStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)</codeEntityReference>
		для тиковых сделок и стаканов соответственно.</para>
		  
		<para>Если используется
		<codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.StorageRegistry</codeEntityReference>,
		то реализация методов с маркет-данными не зависит от
		<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Storages.StorageRegistry.DefaultDrive</codeEntityReference>,
		так как данные всегда сохраняются в файл. Это внутренний формат <token>stocksharp</token>, и он организован таким образом, чтобы сделки или стаканы занимали
		минимум места на диске. Путь к директории, где будут сохраняться (или считываться) маркет-данные, указывается через свойство
		<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Storages.LocalMarketDataDrive.Path</codeEntityReference> у хранилища
		<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Storages.IStorageRegistry.DefaultDrive</codeEntityReference>.</para>
		
		<para>По этому пути будут созданы папки с названиями, равные
		<link xlink:href="34a9c518-60ca-45c0-a118-5e2e42165efa">идентификаторам инструментов</link>
		(для каждого инструмента отдельная папка).</para>

		<alert class="note">
  			<para>Если у <codeEntityReference qualifyHint="false">T:StockSharp.Algo.Storages.LocalMarketDataDrive</codeEntityReference> свойство 
			<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Storages.LocalMarketDataDrive.UseAlphabeticPath</codeEntityReference> = <legacyBold>true</legacyBold>,
			то папки с названиями инструментов будут создаваться внутри алфавитной папки, имя которой берется из первой буквы инструмента.</para>
		</alert>
		
		<para>Внутри каждой такой папки будут созданы подпапки, обозначающие даты маркет-данных. Например, если сохранять
		тиковые сделки за период 3 дня, то для них будут созданы 3 отдельные папки с датами. Формат названия папки всегда фиксирован и равен yyyy_MM_dd. </para>
		
		<para>Внутри каждой папки с датами находятся файлы, с расширением bin. Сделки хранятся в файле <legacyItalic>trades.bin</legacyItalic>, стаканы в <legacyItalic>quotes.bin</legacyItalic>.
		Также могут присутствовать файлы <legacyItalic>candles_XXX.bin</legacyItalic>, где хранятся
		<link xlink:href="cd52cfcf-938c-4fce-9a56-4e9a001f0792">свечки</link>
		разных типов (название файла указывает на тип и параметр свечек) и файлы <legacyItalic>orderLog.bin</legacyItalic> в которых хранится ордер лог.</para>
		
		<para>
		<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Storages.LocalMarketDataDrive.UseAlphabeticPath</codeEntityReference>
		</para>
	</introduction>

	<procedure>
		<title>Пример работы с хранилищем маркет данных</title>

		<steps class="ordered">
			<step>
				<content>
					<para>Пример SampleStorage, находящийся в дистрибутиве <token>stocksharp</token>, показывает, как сохранить и загрузить сделки через класс
					<codeEntityReference>T:StockSharp.Algo.Storages.StorageRegistry</codeEntityReference>.
					В начале создается инструмент, у которого инициализируются основные свойства -
					<codeEntityReference>P:StockSharp.BusinessEntities.Security.Id</codeEntityReference>
					(для определения месторасположения),
					<codeEntityReference>P:StockSharp.BusinessEntities.Security.StepPrice</codeEntityReference>
					и
					<codeEntityReference>P:StockSharp.BusinessEntities.Security.Decimals</codeEntityReference>
					(для сжатия цены в файле <legacyItalic>trades.bin</legacyItalic>):</para>
					
					<code language="C#">
					<![CDATA[
var security = new Security
{
	Id = "TestId",
	MinStepSize = 0.1,
	Decimals = 1,
};
					]]>
					</code>
				</content>
			</step>
			
			<step>
				<content>
					<para>Далее, в качестве исходных данных, создается список из 1000 произвольных сделок (в реальном приложении это будут те сделки, которые или
					получены из внешних источников, или торгового приложения):</para>
					
					<code language="C#">
					<![CDATA[
var trades = new List<Trade>();

// генерируем 1000 произвольных сделок
//

var tradeGenerator = new RandomWalkTradeGenerator(security, 99)
{
	IdGenerator = new IdGenerator
	{
		Current = DateTime.Now.Ticks
	}
};

// инициализация генератора
tradeGenerator.Init();

for (var i = 0; i < 1000; i++)
{
	var t = tradeGenerator.Generate(DateTime.Today + TimeSpan.FromMinutes(i));
	t.Id = i + 1;
	trades.Add(t);
}
					]]>
					</code>
				</content>
			</step>
			
			<step>
				<content>
					<para>Следующим шагом создается сам
					<codeEntityReference>T:StockSharp.Algo.Storages.StorageRegistry</codeEntityReference>:</para>
				  
					<code language="C#">
					<![CDATA[
var storage = new StorageRegistry();
					]]>
					</code>
				</content>
			</step>
			
			<step>
				<content>
					<para>Через хранилище торговых объектов получается хранилище маркет-данных. В примере используется хранилище тиковых сделок, которое получается через метод
					<codeEntityReference qualifyHint="true">M:StockSharp.Algo.Storages.StorageRegistry.GetTradeStorage(StockSharp.BusinessEntities.Security,StockSharp.Algo.Storages.IMarketDataDrive,StockSharp.Algo.Storages.StorageFormats)</codeEntityReference>:</para>
				  
					<code language="C#">
					<![CDATA[
var tradeStorage = storage.GetTradeStorage(security);
					]]>
					</code>
				</content>
			</step>
			
			<step>
				<content>
					<para>Сохранение сделок:</para>
				  
					<code language="C#">
					<![CDATA[
tradeStorage.Save(trades);
					]]>
					</code>
				</content>
			</step>
		  
			<step>
				<content>
					<para>Загрузка сделок, сохраненных на предыдущем шаге:</para>
				  
					<code language="C#">
					<![CDATA[
var loadedTrades = tradeStorage.Load(DateTime.Today, DateTime.Today + TimeSpan.FromMinutes(1000));
 	  
foreach (var trade in loadedTrades)
{
	Console.WriteLine("Сделка № {0}: {1}", trade.Id, trade);
}
					]]>
					</code>
				</content>
			</step>
		  
			<step>
				<content>
					<para>Так как сделки сохраняются в файл, то при следующем запуске примера они будут там присутствовать, и пример выведет уже не 1000 сделок,
					а 2000. Чтобы пример работал правильно, сделки в конце работы необходимо удалить:</para>
				  
					<code language="C#">
					<![CDATA[
tradeStorage.Delete(DateTime.Today, DateTime.Today + TimeSpan.FromMinutes(1000));
					]]>
					</code>
				</content>
			</step>
			
		</steps>
	</procedure>
  
	</developerWalkthroughDocument>
</topic>