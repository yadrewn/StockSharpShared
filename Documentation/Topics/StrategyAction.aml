<?xml version="1.0" encoding="utf-8"?>
<topic id="8c0327db-494a-4fe0-aba8-0d4b93dea60e" revisionNumber="0">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

    <introduction>
	  <para>
		В основу создания стратегий лежит класс <codeEntityReference>T:StockSharp.Algo.Strategies.Strategy</codeEntityReference>, который содержит 
		основные торговые параметры такие как: портфель, инструмент, текущая позиция, прибыль-убыток и т.д.
	  </para>
	  <para>
	  	Рекомендуется, чтобы код стратегии был реализован без привязки к какому-либо инструменту или портфелю. Такой подход позволяет использовать стратегию
		с разными инструментами на разных торговых счетах как одновременно, так и в разные периоды времени:
	  </para>
	  <para>
		<mediaLink>
		  <image placement="center" xlink:href="strategy" />
		</mediaLink>
	  </para>
	  
	  
	  
	  <para>
	  	Класс <codeEntityReference>T:StockSharp.Algo.Strategies.Strategy</codeEntityReference> использует подход, <link xlink:href="97cf7a9c-8b3d-4791-9306-275d55d4cf36">основанный на событиях</link>. 
	  	Такой код получается компактным и оперативно реагирует на рыночные события за счет мгновенного вызова. 
	  	Если же используется <link xlink:href="a8159c99-256b-46e4-80fe-7cf92944b4c9">итерационная модель</link>,
		то код вызывается только по окончанию интервала <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Strategies.TimeFrameStrategy.TimeFrame</codeEntityReference>,
		и есть вероятность пропустить необходимые сигналы на рынке. Поэтому в <token>stocksharp</token> рекомендуется использовать именно события при
		создании логики работы стратегий (все стандартные стратегии <token>stocksharp</token> реализуют именно такой подход).
	  </para>
	  <para>
	  	Для использования событийного подхода необходимо использовать свойство <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Strategies.Strategy.Rules</codeEntityReference>,
	  	через которое задается список правил. Каждое из правил хранит в себе условие срабатывания на событие и само действие, обрабатывающее данное событие.
	  	Ниже приведен код стратегии	<codeEntityReference>T:StockSharp.Algo.Strategies.Derivatives.DeltaHedgeStrategy</codeEntityReference>, которая использует
	  	событийную модель:
	  </para>

		<code language="C#">
		<![CDATA[

/// <summary>
/// Стратегия дельта хеджирования опционов.
/// </summary>
public class DeltaHedgeStrategy : Strategy
{
    private readonly Strategy _tradingStrategy;

    /// <summary>
    /// Создать <see cref="DeltaHedgeStrategy"/>.
    /// </summary>
    /// <param name="tradingStrategy">Стратегия, содержащая в себе дочерние стратегии, которые торгуют по отдельному страйку.</param>
    public DeltaHedgeStrategy(Strategy tradingStrategy)
    {
        if (tradingStrategy == null)
            throw new ArgumentNullException("tradingStrategy");

        _tradingStrategy = tradingStrategy;
    }

    /// <summary>
    /// Метод вызывается тогда, когда вызвался метод <see cref="Strategy.Start"/>,
    /// но состояние процесса <see cref="Strategy.ProcessState"/> еще не перешло в значение <see cref="ProcessStates.Started"/>.
    /// </summary>
    protected override void OnStarted()
    {
        _tradingStrategy
            .WhenNewMyTrades()
            .Do(ReHedge).Apply(this);

        Security
            .WhenChanged()
            .Do(ReHedge).Apply(this);

        base.OnStarting();
    }

    private void ReHedge()
    {
        if (base.ChildStrategies.Count > 0)
        {
            this.AddWarningLog("Рехеджирование уже запущено.");
            return;
        }

        var futurePosition = _tradingStrategy.ChildStrategies.SyncGet(c => c.Sum(strategy =>
        {
            var delta = strategy.Security.Delta(strategy.Security.Volatility / 100m);

            this.AddInfoLog("Дельта по инструменту {0} равна {1}.", strategy.Security, delta);
            this.AddInfoLog("Позиция {0}.", strategy.PositionManager.Position);

            return delta * strategy.PositionManager.Position;
        }));

        this.AddInfoLog("Дельта суммарная {0}.", futurePosition);

        var diff = (int)futurePosition.Round() + (int)base.PositionManager.Position;

        if (diff != 0)
        {
            this.AddInfoLog("Разница в позиции {0}.", diff);

            base.ChildStrategies.Add(CreateQuoting(diff > 0 ? OrderDirections.Sell : OrderDirections.Buy, diff.Abs()));
        }
    }

    /// <summary>
    /// Создать стратегию котирования для изменения позиции.
    /// </summary>
    /// <param name="direction">Направление котирования.</param>
    /// <param name="volume">Объем котирования.</param>
    /// <returns>Стратегия котирования.</returns>
    protected virtual QuotingStrategy CreateQuoting(OrderDirections direction, int volume)
    {
        return new MarketQuotingStrategy(direction, volume);
    }
}
		]]>
		</code>
		<para>
			Данная стратегия добавляет при запуске правило на событие появления новых сделок (для рехеджирования):
		</para>
		<code language="C#">
_tradingStrategy
	.WhenNewMyTrades()
	.Do(ReHedge).Apply(this);
		</code>
		<para>
			а также правило на событие изменения фьючерсного контракта (его цены):
		</para>
		<code language="C#">
Security
	.WhenChanged()
	.Do(ReHedge).Apply(this);
		</code>
				
		<para>
			В <codeEntityReference>T:StockSharp.Algo.Strategies.Derivatives.DeltaHedgeStrategy</codeEntityReference> правила добавляются через вызов метода-расширения
			<codeEntityReference qualifyHint="true" autoUpgrade="true">M:StockSharp.Algo.MarketRuleHelper.Apply(StockSharp.Algo.IMarketRule,StockSharp.Algo.IMarketRuleContainer)</codeEntityReference>
			которое неявно добавляет в список <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Strategies.Strategy.Rules</codeEntityReference>
			новые объекты <codeEntityReference qualifyHint="false">T:StockSharp.Algo.IMarketRule</codeEntityReference>. Это позволяет сократить код и сделать его
			более читаемым. До тех пор, пока правило не добавлено в стратегию - оно неактивно.
		</para>
			
		<para>
			По-умолчанию правило является периодическим, то есть вызывается столько раз, сколько раз произойдет событие. Это будет продолжаться до тех пор,
			пока работает стратегия, в которую добавлено правило (<codeEntityReference qualifyHint="true">P:StockSharp.Algo.Strategies.Strategy.ProcessState</codeEntityReference>
			равно <codeEntityReference qualifyHint="true">F:StockSharp.Algo.ProcessStates.Started</codeEntityReference>).
			Если необходимо сделать правило, которое будет активно от другого условия (например, правило, которое закрывает позицию при остановке стратегии,
			<legacyBold>не должно</legacyBold> зависеть от значения <codeEntityReference qualifyHint="true">F:StockSharp.Algo.ProcessStates.Started</codeEntityReference>),
			то нужно вызвать метод 
			<codeEntityReference qualifyHint="false" autoUpgrade="true">M:StockSharp.Algo.MarketRule`2.Until(System.Func{System.Boolean})</codeEntityReference>.
			В этот метод передается критерий окончания правила.
		</para>


		<alert class="caution">
			Если стратегия была принудительно остановлена через метод <codeEntityReference qualifyHint="true">M:StockSharp.Algo.Strategies.Strategy.Stop</codeEntityReference>
			(например, при нажатии пользователем на окне программы), то стратегия не сразу останавливается, а переходит в состояние 
			<codeEntityReference qualifyHint="true">F:StockSharp.Algo.ProcessStates.Stopping</codeEntityReference>
			и будет продолжать оставаться активной до тех пор, пока список с правилами <codeEntityReference qualifyHint="true">P:StockSharp.Algo.Strategies.Strategy.Rules</codeEntityReference>
			не пустой (что означает, что какие-то правила все еще активны). Поэтому необходимо быть внимательным с добавлением критерия остановки правила,
			чтобы не сделать стратегию неостанавливаемой.
		</alert>
		
    </introduction>

	<nextSteps>
	  <content>
		<para>
		  <link xlink:href="8ea639f6-ce74-4a00-9f13-db59c8c2396f">Дочерние стратегии</link>
		</para>
	  </content>
	</nextSteps>

    <relatedTopics>
      <link xlink:href="97cf7a9c-8b3d-4791-9306-275d55d4cf36">Событийная модель</link>
    </relatedTopics>
    
   </developerConceptualDocument>
</topic>