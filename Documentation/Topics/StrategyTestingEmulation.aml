<?xml version="1.0" encoding="utf-8"?>
<topic id="ab42038e-836b-4c00-9332-0b2db2cbd948" revisionNumber="0">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--<summary>
      <para>Optional abstract</para>
    </summary>-->

	  <introduction>
		  <para>
			  Тестирование на случайных данных является особой разновидностью тестирования. Оно не презназначено для поиска оптимальных параметров. Вместо
			  этого такое тестирование позволяет выявить ошибки в программном коде за счет подверганию торгового робота разнообразным биржевым сценариям.
		  </para>
		  <para>
			  Как правило, при разработке роботов используется только определенный набор сценариев. Поэтому, когда появляется особая ситуация, робот может 
			  неправильно среагировать или выбросить исключения. Например, могут быть следующие ситуации:
		  </para>
		  <list class="bullet">
			  <listItem>
				  Стратегия работает со свечками <codeEntityReference>T:StockSharp.Algo.Candles.TimeFrameCandle</codeEntityReference>, и ожидает при каждой
				  итерации, что за запрашиваемое время всегда будет существовать свечка. Наступил период, когда не было ни одной сделки, и свечка не
				  сформировалась. В итоге, в случае отсутствия правильной обработки, будет выброшено исключение
				  <codeEntityReference>T:System.NullReferenceException</codeEntityReference> и стратегия остановится.
			  </listItem>
			  <listItem>
				  Стратегия работает с неликвидным инструментом, и использует <codeEntityReference>T:StockSharp.BusinessEntities.MarketDepth</codeEntityReference>.
				  Стратегия расчитывает, что стакан всегда заполнен. В определенный момент стакан оказывается наполовину заполнен (например, есть биды, но нет
				  оферов). Если стратегия такое не ожидает, то она или неправильно выставит заявку, или будет сгенерировано исключение и стратегия остановится.
			  </listItem>
			  <listItem>
				  Стратегия расчитывает ценовые уровни. Код написан таким образом, что стратегия ждет появления пробоя выставленных заранее уровней. Если уровни
				  расчитываются и выставляются неправильно, то они никогда не будут пробиты, или всегда будет пробиваться только один из них. В итоге, стратегия
				  или не будет совершать никаких сделок, или они будут убыточны.
			  </listItem>
		  </list>
		  <para>
			  Для этих и для множества других сценариев работы биржи, которые невозможно заранее предугадать, <token>stocksharp</token> и представляет
			  тестирование на случайных данных, которые за счет своей равномерной уникальности смогут сгенерировать максимальное количество условий на коротком
			  интервале.
		  </para>
	  </introduction>

<!--_connector.RegisterTrades(new RandomWalkTradeGenerator(_connector.GetSecurityId(security)));
				_connector.RegisterMarketDepth(new TrendMarketDepthGenerator(_connector.GetSecurityId(security)) { GenerateDepthOnEachTrade = false });-->

	  <procedure>
		  <title>Тестирование на случаных данных стратегии скользящих средних из примеров SampleSMA и SampleSmartSMA</title>
		  <steps class="ordered">
			  <step>
				  <content>
					  <para>
						  Пример SampleRandomEmulation (<legacyItalic>..Samples/Testing/SampleRandomEmulation</legacyItalic>) практически идентичен примеру 
						  SampleHistoryTesting (его описание находится в разделе
						  <link xlink:href="5b90a23e-24b9-474a-a699-da47b666194a">тестирования на истории</link>) за счет использования единого шлюза
						  <codeEntityReference>T:StockSharp.Algo.Testing.HistoryEmulationConnector</codeEntityReference>. Но, в отличие от
						  <link xlink:href="5b90a23e-24b9-474a-a699-da47b666194a">тестирования на истории</link>, при тестировании на случайных данных
						  маркет-данные не подгружаются, а генерируются "на лету". Поэтому в пример добавляются два генератора случайных данных: для стакана
						  и для тиковых сделок. В SampleHistoryTesting используется только один генератор - для стакана, так как нет сохраненной истории.
					  </para>
					  <code language="C#"><![CDATA[
_connector.RegisterTrades(new RandomWalkTradeGenerator(_connector.GetSecurityId(security)));
_connector.RegisterMarketDepth(new TrendMarketDepthGenerator(_connector.GetSecurityId(security)) { GenerateDepthOnEachTrade = false });
]]></code>
				  </content>
			  </step>
			  <step>
				  <content>
					  <para>
						  Результат работы примера выглядит следующим образом:
					  </para>
					  <mediaLink>
						  <image placement="center" xlink:href="sampleemulationtest" />
					  </mediaLink>
				  </content>
			  </step>
		  </steps>
	  </procedure>

    <!--<section>
      <title>A topic section</title>

      <content>
        <para>Some topic content</para>
      </content>
    </section>-->

    <relatedTopics>
      <!-- Supported Link Types
    
         All of the following linking mechanisms may be used in the topic's content 
         as well as in the related topics section.
    
    Linking to API reference documentation: 
    
		    <codeEntityReference>API reference ID</codeEntityReference>

    Linking to external resources and custom HTML topics: 

        <externalLink>
          <linkText>  Required hyperlink text  </linkText>
          <linkAlternateText>  Optional link title  </linkAlternateText>
          <linkUri>  Required URI  </linkUri>
        </externalLink>
    
    Linking to other conceptual topics: 
    
        <link xlink:href="GUID topic name (without file extension)" />
        
    Linking to named references:
    
        (Refer to the project's Help\Settings\links.xml file for more information)
    
        <link xref="id"> Optional link text </link>
        <link vref="id or URI"> Optional link text </link>
        
    -->

      <!-- Example Usage 

      <codeEntityReference>T:MyNamespace.MyClass</codeEntityReference>
      <codeEntityReference>P:MyNamespace.MyClass.MyProp</codeEntityReference>
      <codeEntityReference>M:System.IO.File.OpenText(System.String)</codeEntityReference>

      <externalLink>
        <linkText>Sandcastle Styles</linkText>
        <linkAlternateText>Sandcastle Styles on CodePlex</linkAlternateText>
        <linkUri>http://www.codeplex.com/SandcastleStyles</linkUri>
      </externalLink>

      <externalLink>
        <linkText>Change Log</linkText>
        <linkUri>ChangeLog.html</linkUri>
      </externalLink>

      <link xlink:href="2BFD9215-1216-403d-8C46-8420A4D01B83"/>
      
      <link xref="home">Our Home Page</link>
      <link vref="/controls/design.aspx">Control Architecture</link>
      -->
    </relatedTopics>

  </developerConceptualDocument>
</topic>