<?xml version="1.0"?>
<configuration>
	<configSections>
		<section name="hydra" type="StockSharp.Hydra.Configuration.HydraSection, Hydra"/>
		<section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Ecng.Configuration"/>
	</configSections>

	<runtime>
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
			<probing privatePath="Plugins"/>
		</assemblyBinding>
	</runtime>

	<startup>
		<supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5.1"/>
	</startup>
	<system.data>
		<DbProviderFactories>
			<add name="SQLite Data Provider" invariant="System.Data.SQLite" description=".Net Framework Data Provider for SQLite" type="System.Data.SQLite.SQLiteFactory, System.Data.SQLite"/>
		</DbProviderFactories>
	</system.data>

	<appSettings>
		<add key="settingsPath" value="%Documents%\StockSharp\Hydra\"/>
		<add key="txt_export_ticks" value="{ServerTime:yyyyMMdd};{ServerTime:HHmmssffffff zzz};{TradeId};{TradePrice};{Volume};{OriginSide}"/>
		<add key="txt_export_securities" value="{SecurityId.SecurityCode};{SecurityId.BoardCode};{PriceStep};{SecurityType};{VolumeStep};{Multiplier};{Decimals}"/>
		<add key="txt_export_orderlog" value="{ServerTime:yyyyMMdd};{ServerTime:HHmmssffffff zzz};{IsSystem};{OrderId};{Price};{Volume};{Side};{OrderState};{TimeInForce};{TradeId};{TradePrice}"/>
		<add key="txt_export_news" value="{ServerTime:yyyyMMdd};{ServerTime:HHmmss zzz};{Headline};{Source};{Url}"/>
		<add key="txt_export_level1" value="{ServerTime:yyyyMMdd};{ServerTime:HHmmssffffff zzz};{Changes:{BestBidPrice};{BestBidVolume};{BestAskPrice};{BestAskVolume};{LastTradeTime};{LastTradePrice};{LastTradeVolume}}"/>
		<add key="txt_export_depths" value="{ServerTime:yyyyMMdd};{ServerTime:HHmmssffffff zzz};{Price};{Volume};{Side}"/>
		<add key="txt_export_candles" value="{OpenTime:yyyyMMdd};{OpenTime:HHmmss zzz};{OpenPrice};{HighPrice};{LowPrice};{ClosePrice};{TotalVolume}"/>
		<add key="txt_export_transactions" value="{ServerTime:yyyyMMdd};{ServerTime:HHmmssffffff zzz};{PortfolioName};{TransactionId};{OrderId};{Price};{Volume};{Balance};{Side};{OrderType};{OrderState};{TradeId};{TradePrice}"/>
	</appSettings>
  
	<connectionStrings>
		<!--<add name="SqlServerConStr" connectionString="Server=.\SQLExpress;Database=Trading;User ID=trading;Password=trading;" providerName=""/>-->
		<add name="SQLiteConStr" connectionString="Data Source=%Documents%\StockSharp\Hydra\StockSharp.db" providerName="System.Data.SQLite"/>
	</connectionStrings>

	<hydra>
		<candles>
			<candle name="Time Frame" type="StockSharp.Algo.Candles.TimeFrameCandle, StockSharp.Algo"/>
			<candle name="Tick" type="StockSharp.Algo.Candles.TickCandle, StockSharp.Algo"/>
			<candle name="Volume" type="StockSharp.Algo.Candles.VolumeCandle, StockSharp.Algo"/>
			<candle name="Range" type="StockSharp.Algo.Candles.RangeCandle, StockSharp.Algo"/>
			<candle name="X&amp;O" type="StockSharp.Algo.Candles.PnFCandle, StockSharp.Algo"/>
			<candle name="Renko" type="StockSharp.Algo.Candles.RenkoCandle, StockSharp.Algo"/>
		</candles>
		<indicators>
			<indicator type="StockSharp.Algo.Indicators.Acceleration, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.Alligator, StockSharp.Algo" painter="StockSharp.Xaml.Charting.IndicatorPainters.AlligatorPainter, StockSharp.Xaml.Charting"/>
			<indicator type="StockSharp.Algo.Indicators.AverageDirectionalIndex, StockSharp.Algo" painter="StockSharp.Xaml.Charting.IndicatorPainters.AverageDirectionalIndexPainter, StockSharp.Xaml.Charting"/>
			<indicator type="StockSharp.Algo.Indicators.AverageTrueRange, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.AwesomeOscillator, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.BollingerBands, StockSharp.Algo" painter="StockSharp.Xaml.Charting.IndicatorPainters.BollingerBandsPainter, StockSharp.Xaml.Charting"/>
			<indicator type="StockSharp.Algo.Indicators.ChaikinVolatility, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.ChandeMomentumOscillator, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.CommodityChannelIndex, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.DetrendedPriceOscillator, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.DiMinus, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.DiPlus, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.DirectionalIndex, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.DoubleExponentialMovingAverage, StockSharp.Algo" />
			<indicator type="StockSharp.Algo.Indicators.Envelope, StockSharp.Algo" />
			<indicator type="StockSharp.Algo.Indicators.ExponentialMovingAverage, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.Fractals, StockSharp.Algo" painter="StockSharp.Xaml.Charting.IndicatorPainters.FractalsPainter, StockSharp.Xaml.Charting"/>
			<indicator type="StockSharp.Algo.Indicators.GatorOscillator, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.Highest, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.HullMovingAverage, StockSharp.Algo" />
			<indicator type="StockSharp.Algo.Indicators.Ichimoku, StockSharp.Algo" painter="StockSharp.Xaml.Charting.IndicatorPainters.IchimokuPainter, StockSharp.Xaml.Charting"/>
			<indicator type="StockSharp.Algo.Indicators.JurikMovingAverage, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.KaufmannAdaptiveMovingAverage, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.LinearReg, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.LinearRegression, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.LinearRegSlope, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.Lowest, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.MarketFacilitationIndex, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.MeanDeviation, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.MedianPrice, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.Momentum, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.MovingAverageConvergenceDivergence, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceHistogram, StockSharp.Algo" painter="StockSharp.Xaml.Charting.IndicatorPainters.MovingAverageConvergenceDivergenceHistogramPainter, StockSharp.Xaml.Charting"/>
			<indicator type="StockSharp.Algo.Indicators.MovingAverageConvergenceDivergenceSignal, StockSharp.Algo" painter="StockSharp.Xaml.Charting.IndicatorPainters.MovingAverageConvergenceDivergenceSignalPainter, StockSharp.Xaml.Charting"/>
			<indicator type="StockSharp.Algo.Indicators.NickRypockTrailingReverse, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.OptimalTracking, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.ParabolicSar, StockSharp.Algo" painter="StockSharp.Xaml.Charting.IndicatorPainters.ParabolicSarPainter, StockSharp.Xaml.Charting"/>
			<indicator type="StockSharp.Algo.Indicators.Peak, StockSharp.Algo" painter="StockSharp.Xaml.Charting.IndicatorPainters.PeakPainter, StockSharp.Xaml.Charting"/>
			<indicator type="StockSharp.Algo.Indicators.PeakBar, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.QStick, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.RangeActionVerificationIndex, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.RateOfChange, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.RelativeStrengthIndex, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.RelativeVigorIndex, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.RSquared, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.SimpleMovingAverage, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.SmoothedMovingAverage, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.StandardDeviation, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.StandardError, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.StochasticK, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.StochasticOscillator, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.Sum, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.TripleExponentialMovingAverage, StockSharp.Algo" />
			<indicator type="StockSharp.Algo.Indicators.Trix, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.Trough, StockSharp.Algo" painter="StockSharp.Xaml.Charting.IndicatorPainters.TroughPainter, StockSharp.Xaml.Charting"/>
			<indicator type="StockSharp.Algo.Indicators.TroughBar, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.TrueRange, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.UltimateOscillator, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.VerticalHorizontalFilter, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.Vidya, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.VolumeIndicator, StockSharp.Algo" painter="StockSharp.Xaml.Charting.IndicatorPainters.VolumePainter, StockSharp.Xaml.Charting"/>
			<indicator type="StockSharp.Algo.Indicators.VolumeWeightedMovingAverage, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.WeightedMovingAverage, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.WilderMovingAverage, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.WilliamsR, StockSharp.Algo"/>
			<indicator type="StockSharp.Algo.Indicators.ZigZag, StockSharp.Algo" painter="StockSharp.Xaml.Charting.IndicatorPainters.ZigZagPainter, StockSharp.Xaml.Charting"/>
			<indicator type="StockSharp.Algo.Indicators.ZigZagEquis, StockSharp.Algo" painter="StockSharp.Xaml.Charting.IndicatorPainters.ZigZagEquisPainter, StockSharp.Xaml.Charting"/>
		</indicators>
	</hydra>

	<unity>
		<containers>
			<container>
				<types>
					<register type="Ecng.Serialization.IStorage, Ecng.Serialization" mapTo="Ecng.Data.HierarchicalDatabase, Ecng.Data">
						<constructor>
							<param name="name" value="Hydra Database"/>
							<param name="connectionString">
								<!-- По умолчанию используется SQLite -->
								<value value="SQLiteConStr" typeConverter="Ecng.Configuration.ConnectionSettingsTypeConverter, Ecng.Configuration"/>
								<!--<value value="SqlServerConStr" typeConverter="Ecng.Configuration.ConnectionSettingsTypeConverter, Ecng.Configuration"/>-->
							</param>
						</constructor>

						<!-- SQLite не поддерживает хранимые процедуры -->
						<!--<property name="CommandType" value="StoredProcedure" />-->

						<!-- Для других баз данных провайдер необходимо поменять -->
						<property name="Provider">
							<dependency type="Ecng.Data.Providers.SQLiteDatabaseProvider, Ecng.Data.Providers"/>
						</property>

						<property name="AllowDeleteAll" value="true"/>

						<lifetime type="singleton"/>
					</register>

					<register type="StockSharp.Algo.Storages.IEntityRegistry, StockSharp.Algo" mapTo="StockSharp.Hydra.Core.HydraEntityRegistry, StockSharp.Hydra.Core">
						<constructor>
							<param name="storage">
								<dependency type="Ecng.Serialization.IStorage, Ecng.Serialization"/>
							</param>
						</constructor>

						<!-- Путь, по которому будут записываться маркет-данные -->
						<!--<property name="BasePath" propertyType="System.String" value="" />-->

						<lifetime type="singleton"/>
					</register>
				
					<!-- Пользовательский модель авторзации S#.Data Server клиентских запросов -->
					<!--<register type="StockSharp.Algo.History.Hydra.IRemoteStorageAuthorization, StockSharp.Algo" mapTo="StockSharp.Algo.History.Hydra.WindowsRemoteStorageAuthorization, StockSharp.Algo">
					</register>-->
				</types>
			</container>
		</containers>
	</unity>

	<system.serviceModel>
		<services>
			<service name="StockSharp.Hydra.Server.HydraServer">
				<endpoint address="" binding="netTcpBinding" bindingConfiguration="tcpbinding_config" contract="StockSharp.Algo.History.Hydra.IRemoteStorage"/>
				<host>
					<baseAddresses>
						<add baseAddress="net.tcp://localhost:8000"/>
					</baseAddresses>
				</host>
			</service>
		</services>
		<bindings>
			<netTcpBinding>
				<binding name="tcpbinding_config" transferMode="StreamedResponse" receiveTimeout="00:05:00" sendTimeout="01:00:00" maxBufferPoolSize="2147483647" maxBufferSize="2147483647" maxReceivedMessageSize="2147483647">
					<security mode="None"/>
					<readerQuotas maxArrayLength="2147483647" maxBytesPerRead="2147483647"/>
				</binding>
			</netTcpBinding>
		</bindings>
		<behaviors>
			<serviceBehaviors>
				<behavior>
					<dataContractSerializer maxItemsInObjectGraph="2147483647"/>
					<serviceDebug httpHelpPageEnabled="true" includeExceptionDetailInFaults="true"/>
				</behavior>
			</serviceBehaviors>
		</behaviors>
	</system.serviceModel>
</configuration>
