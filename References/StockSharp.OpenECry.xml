<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StockSharp.OpenECry</name>
    </assembly>
    <members>
        <member name="T:StockSharp.OpenECry.OpenECryMessageAdapter">
            <summary>
            Адаптер сообщений для OpenECry.
            </summary>
        </member>
        <member name="M:StockSharp.OpenECry.OpenECryMessageAdapter.#ctor(Ecng.Common.IdGenerator)">
            <summary>
            Создать <see cref="T:StockSharp.OpenECry.OpenECryMessageAdapter"/>.
            </summary>
            <param name="transactionIdGenerator">Генератор идентификаторов транзакций.</param>
        </member>
        <member name="M:StockSharp.OpenECry.OpenECryMessageAdapter.CreateOrderCondition">
            <summary>
            Создать для заявки типа <see cref="F:StockSharp.Messages.OrderTypes.Conditional"/> условие, которое поддерживается подключением.
            </summary>
            <returns>Условие для заявки. Если подключение не поддерживает заявки типа <see cref="F:StockSharp.Messages.OrderTypes.Conditional"/>, то будет возвращено <see langword="null"/>.</returns>
        </member>
        <member name="M:StockSharp.OpenECry.OpenECryMessageAdapter.OnSendInMessage(StockSharp.Messages.Message)">
            <summary>
            Отправить сообщение.
            </summary>
            <param name="message">Сообщение.</param>
        </member>
        <member name="M:StockSharp.OpenECry.OpenECryMessageAdapter.Save(Ecng.Serialization.SettingsStorage)">
            <summary>
            Сохранить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="M:StockSharp.OpenECry.OpenECryMessageAdapter.Load(Ecng.Serialization.SettingsStorage)">
            <summary>
            Загрузить настройки.
            </summary>
            <param name="storage">Хранилище настроек.</param>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryMessageAdapter.SecurityLookupRequired">
            <summary>
            Требуется ли дополнительное сообщение <see cref="T:StockSharp.Messages.SecurityLookupMessage"/> для получения списка инструментов.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryMessageAdapter.IsSupportNativePortfolioLookup">
            <summary>
            Поддерживается ли торговой системой поиск портфелей.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryMessageAdapter.IsSupportNativeSecurityLookup">
            <summary>
            Поддерживается ли торговой системой поиск инструментов.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryMessageAdapter.Address">
            <summary>
            Адрес API сервера OpenECry. По-умолчанию равен <see cref="F:StockSharp.OpenECry.OpenECryAddresses.Api"/>.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryMessageAdapter.Login">
            <summary>
            Имя пользователя OpenECry.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryMessageAdapter.Password">
            <summary>
            Пароль пользователя OpenECry.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryMessageAdapter.Uuid">
            <summary>
            Уникальный идентификатор программного обеспечения.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryMessageAdapter.Remoting">
            <summary>
            Требуемый режим подключения к терминалу. По умолчанию <see cref="F:StockSharp.OpenECry.OpenECryRemoting.None"/>.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryMessageAdapter.UseNativeReconnect">
            <summary>
            Использовать "родной" механизм восстановления соединения.
            По умолчанию включено.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryMessageAdapter.EnableOECLogging">
            <summary>
            Использовать логирование OpenECry API.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryMessageAdapter.TimeFrames">
            <summary>
            Доступные тайм-фреймы.
            </summary>
        </member>
        <member name="T:StockSharp.OpenECry.OpenECryRemoting">
            <summary>
            Режимы подключения к терминалу.
            Описание функциональности http://www.openecry.com/api/OECAPIRemoting.pdf
            </summary>
        </member>
        <member name="F:StockSharp.OpenECry.OpenECryRemoting.None">
            <summary>
            Отключен.
            </summary>
        </member>
        <member name="F:StockSharp.OpenECry.OpenECryRemoting.Primary">
            <summary>
            Если существует другое подключение с теми же Login/Password, оно может быть разорвано.
            </summary>
        </member>
        <member name="F:StockSharp.OpenECry.OpenECryRemoting.Secondary">
            <summary>
            Попытка активировать в режиме <see cref="F:StockSharp.OpenECry.OpenECryRemoting.Secondary"/>, в случае неудачи - режим <see cref="F:StockSharp.OpenECry.OpenECryRemoting.None"/>.
            </summary>
        </member>
        <member name="T:StockSharp.OpenECry.Xaml.OpenECryAddressComboBox">
            <summary>
            Выпадающий список для выбора адреса сервера OpenECry.
            </summary>
        </member>
        <member name="M:StockSharp.OpenECry.Xaml.OpenECryAddressComboBox.#ctor">
            <summary>
            Создать <see cref="T:StockSharp.OpenECry.Xaml.OpenECryAddressComboBox"/>.
            </summary>
        </member>
        <member name="T:StockSharp.OpenECry.OpenECryAddresses">
            <summary>
            Адреса серверов системы OpenECry.
            </summary>
        </member>
        <member name="F:StockSharp.OpenECry.OpenECryAddresses.DefaultPort">
            <summary>
            Порт сервера по умолчанию, равный 9200.
            </summary>
        </member>
        <member name="F:StockSharp.OpenECry.OpenECryAddresses.Api">
            <summary>
            Основной сервер. Адрес api.openecry.com, порт 9200.
            </summary>
        </member>
        <member name="F:StockSharp.OpenECry.OpenECryAddresses.Sim">
            <summary>
            Демо сервер. Адрес sim.openecry.com, порт 9200.
            </summary>
        </member>
        <member name="T:StockSharp.OpenECry.OpenECryStopType">
            <summary>
            Тип условной заявки OEC.
            </summary>
        </member>
        <member name="F:StockSharp.OpenECry.OpenECryStopType.StopMarket">
            <summary>
            После достижения стоп-цены автоматически выставляется рыночная заявка.
            </summary>
        </member>
        <member name="F:StockSharp.OpenECry.OpenECryStopType.StopLimit">
            <summary>
            После достижения стоп-цены автоматически выставляется лимитная заявка.
            </summary>
        </member>
        <member name="F:StockSharp.OpenECry.OpenECryStopType.TrailingStopMarket">
            <summary>
            Стоп-цена автоматически следует за рынком, но только в выгодном для позиции направлении, 
            оставаясь на заранее заявленном интервале от рыночной цены. 
            В случае, если рынок достигает стоп-цены, автоматически выставляется рыночная заявка.
            </summary>
        </member>
        <member name="F:StockSharp.OpenECry.OpenECryStopType.TrailingStopLimit">
            <summary>
            Как <see cref="F:StockSharp.OpenECry.OpenECryStopType.TrailingStopMarket"/>, но при достижении стоп-цены выставляется лимитная заявка.
            </summary>
        </member>
        <member name="T:StockSharp.OpenECry.OpenECryOrderCondition">
            <summary>
            Условие заявок, специфичных для <see cref="N:OEC"/>.
            </summary>
        </member>
        <member name="M:StockSharp.OpenECry.OpenECryOrderCondition.#ctor">
            <summary>
            Создать <see cref="T:StockSharp.OpenECry.OpenECryOrderCondition"/>.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryOrderCondition.StopType">
            <summary>
            Тип стопа.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryOrderCondition.StopPrice">
            <summary>
            Стоп-цена.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryOrderCondition.Delta">
            <summary>
            Trailing стоп следует за рынком если изменение цены больше чем Delta.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryOrderCondition.IsPercentDelta">
            <summary>
            <see langword="true"/>, если <see cref="P:StockSharp.OpenECry.OpenECryOrderCondition.Delta"/> выражена в процентах.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryOrderCondition.TriggerType">
            <summary>
            Поле срабатывания.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OpenECryOrderCondition.ReferencePrice">
            <summary>
            Trailing стоп начинает слежение, как только цена достигает ReferencePrice.
            </summary>
        </member>
        <member name="T:StockSharp.OpenECry.OpenECryException">
            <summary>
            Исключение, генерируемое реализацией <see cref="T:StockSharp.OpenECry.OECTrader"/> в случае возникновения ошибок.
            </summary>
        </member>
        <member name="M:StockSharp.OpenECry.OpenECryException.#ctor(System.String,System.Exception)">
            <summary>
            Создать <see cref="T:StockSharp.OpenECry.OpenECryException"/>.
            </summary>
            <param name="msg">Текст сообщения.</param>
            <param name="inner">Внутреннее исключение.</param>
        </member>
        <member name="M:StockSharp.OpenECry.Extensions.GetSecurityState(OEC.API.Contract)">
            <summary>
            Получить <see cref="T:StockSharp.Messages.SecurityStates"/> для инструмента, соответствующего контракту <paramref name="contract"/>.
            </summary>
            <param name="contract">Контракт OEC.</param>
            <returns>Состояние инструмента <see cref="T:StockSharp.Messages.SecurityStates"/>.</returns>
        </member>
        <member name="M:StockSharp.OpenECry.Extensions.GetWorkingTimesUtc(OEC.API.Contract)">
            <summary>
            Получить время торгов по инструменту.
            </summary>
            <param name="contract">Контракт OEC.</param>
            <returns>Список диапазонов времени дня (UTC), в течение которых инструмент торгуется.</returns>
        </member>
        <member name="T:StockSharp.OpenECry.OECTrader">
            <summary>
            Реализация интерфейса <see cref="T:StockSharp.BusinessEntities.IConnector"/>, предоставляющая подключение к брокеру OEC.
            </summary>
        </member>
        <member name="M:StockSharp.OpenECry.OECTrader.#ctor">
            <summary>
            Создать <see cref="T:StockSharp.OpenECry.OECTrader"/>.
            </summary>
        </member>
        <member name="M:StockSharp.OpenECry.OECTrader.SendMessage(System.String,System.String)">
            <summary>
            Отправить сообщение другому пользователю.
            </summary>
            <param name="userName">Имя получателя.</param>
            <param name="text">Текст сообщения.</param>
        </member>
        <member name="M:StockSharp.OpenECry.OECTrader.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Подписаться на получение свечек.
            </summary>
            <param name="series">Серия свечек.</param>
            <param name="from">Начальная дата, с которой необходимо получать данные.</param>
            <param name="to">Конечная дата, до которой необходимо получать данные.</param>
        </member>
        <member name="M:StockSharp.OpenECry.OECTrader.UnSubscribeCandles(StockSharp.Algo.Candles.CandleSeries)">
            <summary>
            Остановить подписку получения свечек, ранее созданную через <see cref="M:StockSharp.Algo.Candles.IExternalCandleSource.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)"/>.
            </summary>
            <param name="series">Серия свечек.</param>
        </member>
        <member name="M:StockSharp.OpenECry.OECTrader.OnProcessMessage(StockSharp.Messages.Message)">
            <summary>
            Обработать сообщение.
            </summary>
            <param name="message">Сообщение.</param>
        </member>
        <member name="P:StockSharp.OpenECry.OECTrader.Uuid">
            <summary>
            Уникальный идентификатор программного обеспечения.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OECTrader.Login">
            <summary>
            Имя пользователя OpenECry.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OECTrader.Password">
            <summary>
            Пароль пользователя OpenECry.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OECTrader.RemotingRequired">
            <summary>
            Требуемый режим подключения к терминалу. По умолчанию <see cref="F:StockSharp.OpenECry.OpenECryRemoting.None"/>.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OECTrader.UseNativeReconnect">
            <summary>
            Использовать "родной" механизм восстановления соединения.
            По умолчанию включено.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OECTrader.Address">
            <summary>
            Адрес API сервера OpenECry. По-умолчанию равен <see cref="F:StockSharp.OpenECry.OpenECryAddresses.Api"/>.
            </summary>
        </member>
        <member name="P:StockSharp.OpenECry.OECTrader.EnableOECLogging">
            <summary>
            Использовать логирование библиотеки OEC.
            </summary>
        </member>
        <member name="E:StockSharp.OpenECry.OECTrader.NewCandles">
            <summary>
            Событие появления новых свечек, полученных после подписки через <see cref="M:StockSharp.Algo.Candles.IExternalCandleSource.SubscribeCandles(StockSharp.Algo.Candles.CandleSeries,System.DateTimeOffset,System.DateTimeOffset)"/>.
            </summary>
        </member>
        <member name="E:StockSharp.OpenECry.OECTrader.Stopped">
            <summary>
            Событие окончания обработки серии.
            </summary>
        </member>
    </members>
</doc>
